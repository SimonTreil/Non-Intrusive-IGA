#!/usr/bin/env python
# -*- coding: utf-8 -*-


### ----------------------
### ATTENTION
### Dans aster les noms de variable doivent avoir moins de 8 caractères
### ----------------------


import numpy as np
from numpy import linalg
import scipy.sparse as sp

DEBUT(PAR_LOT='NON',IMPR_MACRO = 'NON')

### Lecture du maillage
asMesh = LIRE_MAILLAGE(FORMAT = 'MED',
		       UNITE = 20,						# Unité logique du fichier de maillage
		       NOM_MED = 'exempleAster',					# Nom du maillage au sein du fichier
		       INFO = 1,
		       )

# Nombre de noeuds physiques du maillage
nbNoeud = asMesh.sdj.DIME.get()[0]
dim = 2 # Dimension du problème

### Affectation des modèles
mod = AFFE_MODELE(MAILLAGE = asMesh,
		  AFFE = (
			  _F(TOUT = 'OUI',				# Modèle de la structure
			    PHENOMENE = 'MECANIQUE',
			    MODELISATION = 'C_PLAN',
			    ),
			  )
			  )

### Définition des matériaux
mat = DEFI_MATERIAU(ELAS= _F(E = 100000.,
			        NU = 0.3,
			       ),			
				)

### Affectation des matériaux
Mat  = AFFE_MATERIAU(MAILLAGE = asMesh,
		     AFFE = (_F(TOUT = 'OUI',
			       MATER = mat,
			       ),
			     ),
			     )

### Affectation des conditions limites
# Encastrement
Fix = AFFE_CHAR_CINE(MODELE = mod,
		     MECA_IMPO = (_F(GROUP_MA = 'Wd',
				    DX = 0., DY = 0.
				    ),
				  )
		     )
# Effort imposé
Fd = AFFE_CHAR_MECA(MODELE = mod,
                    PRES_REP = _F(GROUP_MA='Fd',PRES=-10),
                   )

# Calcul des matrices de rigidité élémentaires
matElem = CALC_MATR_ELEM(OPTION='RIGI_MECA', MODELE=mod, CHAM_MATER=Mat)

# Calcul de la numérotation
numDDL = NUME_DDL(MATR_RIGI=matElem, );

# Assemblage de la matrice de rigidité
matAss = ASSE_MATRICE(MATR_ELEM=matElem, NUME_DDL=numDDL, CHAR_CINE=Fix)

# Calcul du second membre lié aux CL de Dirichlet
vcine = CALC_CHAR_CINE(NUME_DDL=numDDL, CHAR_CINE=Fix,);

# Calcul du second membre lié aux CL de Neumann
vecElem = CALC_VECT_ELEM(OPTION='CHAR_MECA',CHARGE=Fd,CHAM_MATER=Mat)
vneum = ASSE_VECTEUR(VECT_ELEM=vecElem,NUME_DDL=numDDL)

# Factorisation de la matrice de rigidité et prise en compte des CL de 
# Dirichlet éliminées
matAss = FACTORISER(reuse=matAss,MATR_ASSE=matAss, METHODE='MUMPS',);

# Résolution du problèm Ku=F
sol = RESOUDRE(MATR=matAss, CHAM_NO=vneum, CHAM_CINE=vcine,)

# Création du concept de résultat
Res = CREA_RESU(OPERATION = 'AFFE',
                TYPE_RESU = 'EVOL_ELAS',
                NOM_CHAM = 'DEPL',
                AFFE = _F(CHAM_GD = sol,
                        MODELE = mod,
                        CHAM_MATER = Mat,
                        INST = 1.
                        )
                )

# Calcul des champs de réactions nodales
Res = CALC_CHAMP(reuse = Res,
                 RESULTAT = Res,
                 FORCE = 'REAC_NODA',
                 TOUT = 'OUI')

# Sauvegarde au format med
IMPR_RESU(FORMAT = 'MED',UNITE=81,RESU=_F(RESULTAT=Res))


### Exemple de passage aster->numpy et numpy->aster

# Conversion de la matrice de rigidité au format sparse
matAssPython = matAss.EXTR_MATR(sparse='True')
matAssPython = sp.coo_matrix((matAssPython[0],(matAssPython[1],matAssPython[2])),shape=(2*nbNoeud,2*nbNoeud)).tocsc()

# Conversion du champ de déplacement en python (ça s'est facile)
topo = sol.EXTR_COMP(topo=1).noeud # Numéro des noeux associés aux degrés de liberté
NO = ['N{}'.format(ii) for ii in sorted(list(set(list(topo))))] # Liste de noeuds
deplPython = sol.EXTR_COMP().valeurs # Valeur du champ au format numpy

# Conversion d'un champ numpy en champ aster (là c'est un poil plus chiant)
table = CREA_TABLE(LISTE=(_F(LISTE_K = NO,PARA='NOEUD'),
                          _F(LISTE_R = deplPython[range(0,dim * len(NO),2)],PARA='DX'),
                          _F(LISTE_R = deplPython[range(1,dim * len(NO),2)],PARA='DY'),
                          )
                    )

chamAste = CREA_CHAMP(TYPE_CHAM = 'NOEU_DEPL_R',
                      OPERATION = 'EXTR',
                      TABLE = table,
                      MAILLAGE = asMesh)

### Dans aster, un nom de concept doit d'abord être supprimé avant de pouvoir être
### réutilisé

DETRUIRE(CONCEPT=_F(NOM=chamAste))

chamAste = CREA_CHAMP(TYPE_CHAM = 'NOEU_DEPL_R',
                      OPERATION = 'EXTR',
                      TABLE = table,
                      MAILLAGE = asMesh)

### Si vous êtes dans une boucle et que vous souhaitez garder le même nom, il faut
### l'astuce suivante:
# On crée une liste vide dans laquelle on va sauver les concepts aster qu'on 
# souhaite garder
AsterDim = 100
o = [None]*AsterDim
AsterCount = iter(range(AsterDim))
for ii in range(5):
    # On incrémente le compteur de la liste
    AsterIter = AsterCount.__next__()
    chamAste = o[AsterIter] = CREA_CHAMP(TYPE_CHAM = 'NOEU_DEPL_R',
                                            OPERATION = 'EXTR',
                                            TABLE = table,
                                            MAILLAGE = asMesh)
